<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAISEAAAEAIAA0EgAAFgAAACgAAAAhAAAAQgAAAAEAIAAAAAAABBEAAN0AAADdAAAAAAAAAAAA
        AABreZADanePPWVwielkbof/ZG6H/2Ruh/9pc4z/cX+Y/3OCm/9zgpv/c4Kb/2x5kv9mcYr/YWd8/1lR
        Wf9mZ3X/dYah/2Zndf9ZUVn/YWd8/2Zxiv9seZL/c4Kb/3OCm/9zgpv/cX+Y/2lzjP9kbof/ZG6H/2Ru
        h/9lcInpanePPWt5kANqd48HanaOgmRviPNkbof/ZG6H/2Ruh/9pc4z/cX+Y/3OCm/9zgpv/coGa/2l0
        jf9kboj/YGN1/1dNUf9lZnP/dYah/2Vmc/9XTVH/YGN1/2RuiP9pdI3/coGa/3OCm/9zgpv/cX+Y/2lz
        jP9kbof/ZG6H/2Ruh/9kb4jzanaOgmp3jwdrdY0IanWNimRuh/Rkbof/ZG6H/2Ruh/9pdI3/cX+Y/3OC
        m/9zgpv/bnuU/2Zxiv9kb4j/Xl5t/1ZJS/9kZXL/dIWf/2Rlcv9WSUv/Xl5t/2RviP9mcYr/bnuU/3OC
        m/9zgpv/cX+Y/2l0jf9kbof/ZG6H/2Ruh/9kbof0anWNimt1jQhrdY0Ia3WNimRuh/Rkbof/ZG6H/2Ru
        h/9rd5D/coCZ/3OCm/9zgpv/anWO/2Ruh/9kb4n/XVpm/1VFRf9kZHD/c4Kb/2RkcP9VRUX/XVpm/2Rv
        if9kbof/anWO/3OCm/9zgpv/coCZ/2t3kP9kbof/ZG6H/2Ruh/9kbof0anWNiWp2jgdrdY0Ia3WNimRu
        h/Rkbof/ZG6H/2Vwif9wfZb/c4Kb/3OCm/9vfZb/Z3KL/2Ruh/9kbof/W1Zf/1RDQv9jYm7/cX+X/2Ni
        bv9UQ0L/W1Zf/2Ruh/9kbof/Z3KL/299lv9zgpv/c4Kb/3B9lv9lcIn/ZG6H/2Ruh/9kbof0anWNimt1
        jQdpdo8GaXWPd2Ruh/Jkbof/ZW+I/256k/9ygZr/c4Kb/3OCm/9qdo//ZG+I/2Ruhv9oZ3X/XlFU/1RE
        Q/9iYWz/cHyT/2JhbP9UREP/XlFU/2hndf9kbob/ZG+I/2p2j/9zgpv/c4Kb/3KBmv9uepP/ZW+I/2Ru
        h/9kbofyaXWPd2l2jwZldIoCZXOJMmRuh+tlb4j/bnqT/3KBmv9zgpv/c4Kb/3OCm/9rd5D/ZW+J/2Zq
        ff9rYmb/aVhX/1xMTP9fXWn/Z3GJ/19daf9cTEz/aVhX/2tiZv9man3/ZW+J/2t3kP9zgpv/c4Kb/3OC
        m/9ygZr/bnqT/2VviP9kbofrZXOJMmV0igJfcYEAZHOIDGh0jblufJX8coGa/3OCm/9zgpv/coGa/299
        lv9qdo//ZXCK/2lmc/9tX1//blxa/2paWP9mX2X/ZmVz/2ZfZf9qWlj/blxa/21fX/9pZnP/ZXCK/2p2
        j/9vfZb/coGa/3OCm/9zgpv/coGa/257lPxodI25ZHOIDF9xgQBhcoQAbHiUAWp3kCpygZpyc4Kb3nOC
        m/9zgpv/bXqT/2dyi/9lcIn/ZG6G/2tjav9uXVv/bl1b/25cWf9yeIf/dZKx/3J4h/9uXFn/bl1b/25d
        W/9rY2r/ZG6G/2Vwif9ncov/bXqT/3OCm/9zgpv/c4Kb3nKAmnJqd5AqbHiUAWFyhAAAAAAAaXaPAGd0
        jQB1gp0QcoObO3ODmmx0gpucaHOM7mRuh/9kbof/Zml8/2xgZP9uXVr/blxZ/3F0gf94nML/fLDg/3qg
        xv9zdoT/blxZ/25dWv9sYGT/Zml8/2Ruh/9kbof/aHOM73ODm51zg5pscoObO3WCnRBndI0AaXaPAAAA
        AAAAAAAAAAAAAHSBnAB0gZwAeXecAHOGmAt1gpwfZW+KYWRuh6RkbojiaWVx/21eXv9uXFn/b3F+/3OS
        uP91otT/dqjb/3ms3f95nsT/c3eE/25bWP9tXl7/aWVx/2RuiOJkboekZW+KYXSDmyBzhpgLeXecAHSB
        nAB0gZwAAAAAAAAAAAAAAAAAAAAAAAAAAABmmZkAZpiZAHOEmQBzgJoAX2iICWVuhyVjbYtCamNrkW1d
        XOdvcX7/cZC2/3Wi0/95qNj/e6va/3us3P95q9v/d5vB/3N3hP9tXVvnamNrkWNti0JlboclX2iICXKB
        mQBzhJkAZpiZAGaZmQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABibIkAYmyJAGRt
        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
        AAAAAAAAAAAAAAAAAAAAAAAAY22IAGNtiEFkboh4ZG6Hk2Rth7dmcIrvZ3GK/2dxiv9mcYr/Z3ON/Wl2
        j/xqeJL7a3qU+mp4kvtpdo/8Z3ON/WZxiv9ncYr/Z3GK/2Zwiu9kboa4ZG6Hk2RuiHhjbYhBY22IAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZG6HAGRuh21kb4iMY2+GcWVximJvfZbMcoGa/3OC
        m/9zgpv/c4Kb/3OCm/9zgpv/c4Kb/3OCm/9zgpv/c4Kb/3OCm/9zgpv/coGa/299lsxlcYpiY2+GcWRv
        iIxkbodtZG6HAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZG6HAGRuhwBkb4gAY2+GAHF/
        mABzgZt7c4Kb6nOCm/9zgpv/c4Kb/3OCm/9zgpv/c4Kb/3OCm/9zgpv/c4Kb/3OCm/9zgpv/c4Kb6nOB
        m3txf5gAY2+GAGRviABkbocAZG6HAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAHKDmgByg5oqc4KbwnOCm/9zgpv/c4Kb/3OCm/9zgpv/c4Kb/3OCm/9zgpv/c4Kb/3OC
        m/9zgpv/c4KbwnKDmipyg5oAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAADnBzACEb4sAc4KaiXOCm/Fzgpv/c4Kb/3OCm/9zgpv/c4Kb/3OC
        m/9zgpv/c4Kb/3OCm/9zgpvxc4KaiYRviwA5wcwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD//wB1gJoAdIGbOnOCm8hzgpv/c4Kb/3OC
        m/9zgpv/c4Kb/3OCm/9zgpv/c4Kb/3OCm/9zgpvIdIGbOnWAmgAA//8AAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB7gKQAKJFJAHOC
        m5Nzgpv3c4Kb/XOCm/pzgpv3c4Kb9XOCm/dzgpv6c4Kb/XOCm/dzgpuTKJFJAHuApAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AACAgKoAcYObAHKDnERzgprFc4Ob5XOCm8Bzgpuec4KajXOCm55zgpvAc4Ob5XOCmsVyg5xEcYObAICA
        qgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAgAAAAMAA
        AAGAAAAA4AAAA4AAAAD8AAAfgAAAAP8AAH+AAAAA/wAAf4AAAAD/AAB/gAAAAP4AAD+AAAAA/gAAP4AA
        AAD+AAA/gAAAAP4AAD+AAAAA/gAAP4AAAAD+AAA/gAAAAP4AAD+AAAAA8AAAB4AAAADwAAAHgAAAAPAA
        AAeAAAAA8AAAB4AAAADwAAAHgAAAAP8AAH+AAAAA/wAAf4AAAAD/AAB/gAAAAP+AAP+AAAAA/4AA/4AA
        AAA=
</value>
  </data>
</root>